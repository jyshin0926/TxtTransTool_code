var fs = require('fs'),
    net = require('net');

var config = require(process.cwd() + '/conquer.json'),
    socket = config.path || './conquer.sock'

module.exports = function (callback) {
    var server = net.createServer(callback);

    server.on('error', function (e) {
        // If the socket we tried to connect is already in use, we first try to
        // connect to it. If nobody is listening on that socket that means we can
        // take it over.
        if (e.code == 'EADDRINUSE') {
            var clientSocket = new net.Socket();

            console.log('conquer: socket already in use. trying to take over...');

            clientSocket.on('error', function(e) {
                if (e.code == 'ECONNREFUSED') {
                    // At this stage we have asserted that nobody is listening on
                    // that socket so we can safely unlink it.
                    fs.unlinkSync(socket);

                    server.listen(socket, function() {
                        console.log('conquer: socket assimilated');
                    });
                }
            });

            // If connection was successful, it means some application is using
            // that socket, so we abort.
            clientSocket.connect({path: socket}, function() { 
                console.log('conquer: socket already bound. exiting...');
                process.exit();
            });
        }
    });

    switch (config.mode) {
        case 'network':
            server.listen({
                host: 'localhost',
                port: config.port
            }, function() {
                console.log('conquer: bound');
            });
            break;
        case 'socket':
        default:
            server.listen(socket, function() {
                console.log('conquer: bound');
            });
            break;
    }
};
